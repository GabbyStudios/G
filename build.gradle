import org.apache.tools.ant.taskdefs.condition.Os
import com.badlogic.gdx.tools.texturepacker.TexturePacker

buildscript {
    repositories {
    	mavenLocal()
        mavenCentral()
        maven { url 'https://github.com/steffenschaefer/gwt-gradle-plugin/raw/maven-repo/' }
        jcenter()
        maven { url 'https://maven.google.com' }
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
		classpath 'gradle.plugin.me.champeau.gradle:jmh-gradle-plugin:0.3.0'
		classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.9.0'
		classpath 'com.badlogicgames.gdx:gdx-tools:1.9.8'
		classpath "com.ullink.gradle:gradle-ikvm-plugin:2.3"
    }
}

Properties sdkProperties = new Properties()
sdkProperties.load(project.rootProject.file('local.properties').newDataInputStream())

if(project.hasProperty('ossrhUser') && project.hasProperty("release")) {
	apply plugin: "io.codearte.nexus-staging"

	nexusStaging {
		packageGroup = 'org.mini2Dx'
		username = ossrhUser
		password = ossrhPassword
	}
}

ext {
	androidBeansVersion="1.0.0"
	androidVersion="4.4"
	artemisVersion="2.1.0"
	beanutilsVersion="1.8.3"
	gdxVersion="1.9.8"
	langVersion="3.1"
	multiDexVersion="1.0.1"
	nativesLoaderVersion="1.0.0"
	reflectionsVersion="0.9.10"
	roboVMVersion="2.3.0"
	
	junitVersion="4.8.1"
	jmockVersion="2.5.1"
	concurrentUnitVersion="0.4.2"
}

subprojects {
    apply plugin: "eclipse"
    apply plugin: "idea"
    
    tasks.eclipse.doLast {
    		delete ".project"
	}
	
	repositories {
		mavenLocal()
		mavenCentral()
		maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
		maven { url "https://oss.sonatype.org/content/repositories/releases/" }
		maven { url 'https://maven.google.com' }
	}
}

def docProjects() {
	subprojects.findAll { !it.name.contains('uat') }
}

def projectVersion = '2.0.0-SNAPSHOT';

configure(docProjects()) {
	apply plugin: "signing"
	apply plugin: "maven"
	
	group = 'org.mini2Dx'
	version = projectVersion

	if(project.name.contains("android")) {
		apply plugin: "com.android.library"
		
		task javadoc(type: Javadoc) {
			failOnError = false
			source = android.sourceSets.main.java.srcDirs
		    classpath += configurations.compile
		
		    afterEvaluate {
		        // Wait after evaluation to add the android classpath
		        // to avoid "buildToolsVersion is not specified" error
		        classpath += files(android.getBootClasspath())
		
		        // Process AAR dependencies
		        def aarDependencies = classpath.filter { it.name.endsWith('.aar') }
		        classpath -= aarDependencies
		        aarDependencies.each { aar ->
		            // Extract classes.jar from the AAR dependency, and add it to the javadoc classpath
		            def outputPath = "$buildDir/tmp/aarJar/${aar.name.replace('.aar', '.jar')}"
		            classpath += files(outputPath)
		
		            // Use a task so the actual extraction only happens before the javadoc task is run
		            dependsOn task(name: "extract ${aar.name}").doLast {
		                extractEntry(aar, 'classes.jar', outputPath)
		            }
		        }
		    }
		}
		
		task sourcesJar(type: Jar) {
			classifier = 'sources'
			from android.sourceSets.main.java.srcDirs[0]
		}
		
		task javadocJar(type: Jar) {
			classifier = 'javadoc'
			from javadoc
		}
		
		artifacts {
			archives javadocJar, sourcesJar
		}
	} else {
		apply plugin: "java"
		
		sourceCompatibility = 1.7
		targetCompatibility = 1.7
		
		configurations {
			testOutput.extendsFrom (testCompile)
		}
		
		task sourcesJar(type: Jar) {
			classifier = 'sources'
			from sourceSets.main.allSource
		}
		
		task testJar(type: Jar, dependsOn: testClasses) {
			from sourceSets.test.output
			include '**/serialization/**/*.class','**/di/**/*.class'
			classifier = 'test'
		}
		
		task javadocJar(type: Jar) {
			classifier = 'javadoc'
			from javadoc
		}
		
		artifacts {
			archives javadocJar, sourcesJar, testJar
			testOutput testJar
		}
	}
  
	// Maven Central publication
	if(project.hasProperty('ossrhUser')) {
		signing {
			sign configurations.archives
		}
		
		uploadArchives {
			repositories {
				mavenDeployer {
					// POM signature
					beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
					// Target repository
					repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
						authentication(userName: ossrhUser, password: ossrhPassword)
					}
					pom.project {
						name project.name
						description project.description
						packaging 'jar'
						url 'https://github.com/mini2Dx/mini2Dx'
	
						scm {
							connection 'scm:git:https://github.com/mini2Dx/mini2Dx.git'
							developerConnection 'scm:git:git@github.com:mini2Dx/mini2Dx.git'
							url 'https://github.com/mini2Dx/mini2Dx.git'
						}
	
						licenses {
							license {
								name 'The BSD 3-Clause License'
								url 'https://opensource.org/licenses/BSD-3-Clause'
								distribution 'repo'
							}
						}
	
						developers {
							developer {
								id = 'tomcashman'
								name = 'Thomas Cashman'
								email = 'thomascashman404@gmail.com'
							}
						}
					}
				}
			}
		}
	}
}

project(":" + rootProject.name + "-core") {
	description = "mini2Dx core library"
    
    apply plugin: "me.champeau.gradle.jmh"
    apply plugin: "jacoco"
	apply plugin:'ikvm'

    dependencies {
		compile "org.mini2Dx:gdx-math:$gdxVersion"
		compile "org.mini2Dx:gdx-input:$gdxVersion"
        
		testCompile "com.badlogicgames.gdx:gdx-backend-headless:$gdxVersion"
        testCompile "junit:junit:$junitVersion"
		testCompile "org.jmock:jmock-junit4:$jmockVersion"
		testCompile "org.jmock:jmock-legacy:$jmockVersion"
		testCompile "net.jodah:concurrentunit:$concurrentUnitVersion"
    }

	ikvm {
		ikvmHome = sdkProperties.getProperty('sdk.ikvm.dir')
		debug = false
	}
	
	jmh {
		timeUnit = 'ns'
		threads = Runtime.getRuntime().availableProcessors()
		warmupIterations = 10
		iterations = 10
		fork = Runtime.getRuntime().availableProcessors()
		jvmArgsPrepend = '-Xmx1024m'
	}
    
  jacocoTestReport {
		group = "Reporting"
		reports {
			xml.enabled true
			csv.enabled false
			html.destination "${buildDir}/reports/coverage"
		}
		afterEvaluate {
			classDirectories = files(classDirectories.files.collect {
				fileTree(dir: it)
			})
    	}
	}
}